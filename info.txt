------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------- РАЗРАБОТКА АВТОМАТИЗИРОВАННОЙ СИСТЕМЫ УЧЕТА ПОСЕЩЕНИЯ ЗАНЯТИЙ СТУДЕНТАМИ ПЕТРГУ --------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------

Разработчики:
01. Катаев Александр 22505
02. Буйко Александр 22505

Инструменты/технологии разработки:
- HTML/CSS, responsive design
- Front-end: javaScript, 
			 jQuery, 
			 underscore.js,
			 backbone.js,
			 icanhaz
- Back-end: Node.js + MongoDB
			npm i
				Express@4
				mongoose
				crypto
				async

------------------------------------------------------------------------------------------------------------------------------------------------

Ближайшие задачи:

	Допроектировать базу данных

	Реализовать простые get-запросы

	Реализовать процедуру входа пользователей в систему:
		Аутентификация (подтверждение подлинности субъекта (логин + пароль))
		Авторизация (проверка прав доступа субъекта к ресурсам)
		Идентификация (установление личности субъекта)


------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------- MongoDB -------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------

коллекция [ == таблица ]
документ  [ == запись  ]
курсор    [ == кортеж  ]


КОЛЛЕКЦИИ:

	* pemissions (разрешения)
		name           : String
		description    : String

	* roles      (роли)
		name           : String
		_permissions   : ObjectId

	* users      (пользователи)
		username       : String
		hashedPassword : String
		salt           : String
		_role          : ObjectId
		created        : Date


	* specialties (специальности)
		name           : String

	* groups     (группы)
		number         : String
		_speciality    : ObjectId

	* students   (студенты)       //  фио, номер группы, является ли старостой
		name           : String
		surname        : String
		_group         : ObjectId
		isElder        : Boolean


	* chairs     (кафедры)        //  название кафедры
		name           : String

	* teachers   (преподаватели)  //  фио
		name           : String
		surname        : String
		_chair         : ObjectId


	* subjects   (предметы)       //  название предмета
		name           : String
		_teacher       : ObjectId
		_groups        : ObjectId



	* attendance (посещаемость)   //  дата + отношение: название предмета - преподаватель - список групп 
		date           : Date
		_subject       : ObjectId
		att    : { ... }

		


РОЛИ (в порядке убывания полномочий):
	- admin   - администратор      - полный доступ
	- dean    - сотрудник деканата - просмотр статистики по группам, отдельным студентам; возможность формирования отчетов
	- teacher - преподаватель      - контроль старосты (возможность править за старостой); после потдтверждения дальнейшая правка возможна 
									 только администратором
	- elder   - староста           - возможность отмечать студентов своей группы, просмотр статистики студентов своей группы
	- student - студент            - только просмотр собственной статистики посещаемости изучаемых дисциплин


идея: не привязываться к расписанию, староста формирует параметры текущего занятия (дата, преподаватель, список групп, отмечает присутствующих), после чего старосту проверяет преподаватель.


















------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------ Backbone.js -----------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------


Так есть ли в backbone.js КОНТРОЛЛЕРЫ? не совсем. Представления в Backbone как правило содержат в себе логику "контроллеров", в тоже время маршрутизаторы используются для управления статусами приложения, но они не являются Контроллерами в классическом понимании MVC.

В связи с этим, не смотря на указанное в официальной документации или в записях блога, Backbone не является ни MVC/MVP, ни MVVM фреймворком. Лучше всего воспринимать его сленом семейства MV* фреймворков, которые приближаются к изначальной архитектуре по-своему. В этом, конечно же, нет ничего плохого, но важно понимать различия между классическим MVC и MV* когда вы вступаете в обсуждение ваших backbone проектов и затрагиваете тему MVC.

...

В Backbone логика контроллера распределяется между Backbone.View и Backbone.Router. В ранних релизах Backbone содержался и так называемый и Backbone.Controller, но его переименовали в маршрутизатор, чтобы прояснить его роль.

Основная роль Маршрутизаторов - это перевод URL-запросов с статусы приложения. Когда пользователь переходит по ссылке www.example.com/photos/42, Маршрутизатор используется, чтобы показать фотографию с таким ID, и определяет, как себя должно повести приложение в ответ на этот запрос. Маршрутизатор может содержать и традиционные функции контроллера, такие как привязка событий между моделями и представлениями или визуализация отдельных участков страницы. Тем не менее, соучастник проекта Backbone Tim Branyen указал на то, что все это можно реализовывать и без Backbone.Router, поэтому вероятный пример использования конроллера выглядит так:

var PhotoRouter = Backbone.Router.extend({
  routes: { "photos/:id": "route" },

  route: function(id) {
    var item = photoCollection.get(id);
    var view = new PhotoView({ model: item });

    something.html( view.render().el );
  }
});


Коллекции в Backbone это просто набор моделей. По аналогии с базой данных коллекции — это результаты запросов к БД, содержащие строки (Модели). 

var GamesCollection = Backbone.Collection.extend({
    model : Game,
    ...
});



Что MVC даст нам?

Итак, разделение задач в MVC обеспечивает модульность функциональности приложения и позволяет:

	* Облегчение поддержки кода. Когда должны быть произведены обновления в приложении, это можно сделать прозрачно, делаются ли изменения, ориентированные на 	данные (то есть изменения в моделях и, возможно, контроллерах) или просто визуальные правки (то есть изменения в представлениях).
	* Разделение модели и представления означает прямой путь к написанию unit-тестов для бизнес-логики.
	* Устраняется дублирование кода моделей и контроллеров в приложении.
	* В зависимости от размера приложения и разделения ролей, такая модульность позволяет разработчикам, занимающимся написанием ядра и разработчикам, работающим над пользовательским интерфейсом, работать одновременно.


------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------